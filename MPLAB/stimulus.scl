// 
// /home/paolo/workspace/forno/MPLAB/stimulus.scl
// Generated by Stimulus MPLAB X
// Wed Aug 19 21:24:22 CEST 2015
// 
// 312.5 cycle


configuration for "pic18f4620" is
    
   //alias CTS : bit is RC7;
   //alias RTS : bit is RA0;
   //alias RX : bit is INT0;
   // shared label AS_IDLE; // Entering this label indicaties that the application is ready
    
end configuration;

testbench for "pic18f4620" is
begin

startup: process is
    begin
 print("start");
//       //RA0 <= '0'; // RTS <= MARK
        RC7 <= '0'; // RX <= MARK
        AN0 <= 340 ms;
        wait;
     end process;

        readlines: process is
        file DataFile : text;
         variable status : file_open_status;
         variable DataLine : line;
         variable CommentMsg : string;
       begin
 print("start");
        file_open(status, DataFile, "/home/paolo/workspace/forno/MPLAB/stimulus.txt", read_mode);
         if status != open_ok then
            print("Input file ", "stimulus.txt", " not found");
             wait;
         end if;
        // wait until PCL == AS_IDLE;
         while endfile(DataFile) == false loop
            readline(DataFile, DataLine);
             if match(DataLine, "") == true then      // skip empty line
             elsif match(DataLine, "//") == true then // dump comments to SIM log
                read(DataLine,CommentMsg);
                report CommentMsg;
             else
                //report "RTS<=SPACE";
                //RA0 <= '1';                       // RTS <= SPACE
                // wait until RA0 == '0';
                //report "RTS==MARK";
                wait for 1 ic;
             end if;
         end loop;
        file_close(DataFile);
        //wait until PCL == 0;
         wait;
       end process;



 sendline: process is
         variable BitDuration : time;
         variable ShiftReg : integer;
         variable CurrentBit : integer;
         variable BitCount : integer := 0;
         variable ByteCount : integer := 0;
         variable ByteToSend : integer := 0;
         variable Octet : integer := 0;
         variable Timer : time;
         variable RightNow : time;
       begin
        print("start");
         ByteCount := 0;
        BitDuration := 1 sec / 38400;
        // wait until RA0 == '1';
        //report "RTS=space";
        ByteToSend := 1;
        print("aa");
        read(DataLine, ByteToSend);
        print("bb");
         while ByteToSend != 1 loop
             if ByteCount == 16 then
                ByteCount := 0;
             end if;
             if ByteCount == 0 then
 //                if RC7 != '0' then
                    //report "waiting CTS";
 //                    wait until RC7 == '0';
 //                end if;
               //report "CTS=SPACE";
             end if;
            print("sending DATA[", ByteCount, "]==", ByteToSend);
            ShiftReg := ByteToSend;
            BitCount := 0;
            // Send Byte
            RC7 <= '1'; // RX <= SPACE; // Start bit
            Timer := now();
             wait for BitDuration;
            Timer := Timer + BitDuration;
             while BitCount < 8 loop
                CurrentBit := ShiftReg; // /2              
                CurrentBit := ShiftReg - 2 * CurrentBit; 
                ShiftReg := ShiftReg; // /2
                 if CurrentBit == 0 then
                    RC7 <= '1';
                 else
                    RC7 <= '0'; 
                 end if;
                Timer := Timer + BitDuration; 
                RightNow := now();           
                wait for Timer - RightNow;      
                BitCount := BitCount + 1;
             end loop;
           //report "STOP BIT";
           RC7 <= '1'; // RX <= MARK;
                 wait for BitDuration + 1 ic;
            ByteCount := ByteCount + 1;
            ByteToSend := 1;
            read(DataLine, ByteToSend);
         end loop;
        //RA0 <= '0'; // RTS <= MARK
        //report "RTS=MARK";
       end process;

end testbench;